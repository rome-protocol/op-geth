name: Build docker image

on:
  push:
  workflow_dispatch:
    inputs:
      rollup_client_ref_name:
        type: string
        description: 'rollup_client branch name to use for building the image'
        required: false
        default: 'main'

env:
  ROLLUP_CLIENT_REF_NAME: ${{ github.event.inputs.rollup_client_ref_name || 'main' }}
  OP_GETH_REF_NAME: ${{ github.ref_name }}

jobs:
  build-amd64:
    runs-on: ubuntu-22.04-8core-32gb-300
    outputs:
      digest: ${{ steps.push.outputs.digest }}
    steps:
      - name: Checkout rome-rollup-clients
        uses: actions/checkout@v4
        with:
          repository: rome-protocol/rome-rollup-clients
          path: rome-rollup-clients
          ref: ${{ env.ROLLUP_CLIENT_REF_NAME }}
          token: ${{ secrets.GIT_ROLLUP_TOKEN }}

      - name: Checkout op-geth
        uses: actions/checkout@v4
        with:
          repository: rome-protocol/op-geth
          path: op-geth
          ref: ${{ env.OP_GETH_REF_NAME }}
          token: ${{ secrets.GIT_ROLLUP_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push amd64 image
        id: push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: rome-rollup-clients/op-geth/Dockerfile
          platforms: linux/amd64
          push: true
          provenance: false
          tags: romeprotocol/rollup-op-geth:${{ env.OP_GETH_REF_NAME }}

  build-arm64:
    runs-on: ubuntu-24.04-arm
    outputs:
      digest: ${{ steps.push.outputs.digest }}
    steps:
      - name: Checkout rome-rollup-clients
        uses: actions/checkout@v4
        with:
          repository: rome-protocol/rome-rollup-clients
          path: rome-rollup-clients
          ref: ${{ env.ROLLUP_CLIENT_REF_NAME }}
          token: ${{ secrets.GIT_ROLLUP_TOKEN }}

      - name: Checkout op-geth
        uses: actions/checkout@v4
        with:
          repository: rome-protocol/op-geth
          path: op-geth
          ref: ${{ env.OP_GETH_REF_NAME }}
          token: ${{ secrets.GIT_ROLLUP_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push arm64 image
        id: push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: rome-rollup-clients/op-geth/Dockerfile
          platforms: linux/arm64
          push: true
          provenance: false
          tags: romeprotocol/rollup-op-geth:${{ env.OP_GETH_REF_NAME }}

  create-manifest:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          docker manifest create romeprotocol/rollup-op-geth:${{ env.OP_GETH_REF_NAME }} \
            --amend romeprotocol/rollup-op-geth@${{ needs.build-amd64.outputs.digest }} \
            --amend romeprotocol/rollup-op-geth@${{ needs.build-arm64.outputs.digest }}

          docker manifest push romeprotocol/rollup-op-geth:${{ env.OP_GETH_REF_NAME }}

      - name: Tag and push :latest
        if: ${{ env.OP_GETH_REF_NAME == 'main' && env.ROLLUP_CLIENT_REF_NAME == 'main' }}
        run: |
          docker manifest create romeprotocol/rollup-op-geth:latest \
            --amend romeprotocol/rollup-op-geth@${{ needs.build-amd64.outputs.digest }} \
            --amend romeprotocol/rollup-op-geth@${{ needs.build-arm64.outputs.digest }}

          docker manifest push romeprotocol/rollup-op-geth:latest

  run-tests:
    runs-on: ubuntu-latest
    needs: [create-manifest]
    steps:
      - name: Trigger tests
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GIT_ROLLUP_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'rome-protocol',
              repo: 'tests',
              workflow_id: 'reusable_wf_tests.yml',
              ref: 'master',
              inputs: {
                docker_image_tags: JSON.stringify({
                  evm: "master",
                  apps: "main",
                  relayer: "main",
                  geth: process.env.GITHUB_REF_NAME || "main",
                  tests: "latest",
                  uniswap: "latest"
                }),
                tests_list: "evm,spl,state_comparison,state_comparison_2,uniswap_proxy,uniswap_op_geth"
              }
            });

      - name: Echo link to triggered workflow
        run: |
          echo "Tests triggered in private repo:"
          echo "https://github.com/rome-protocol/tests/actions"

      - name: Wait for tests to finish
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GIT_ROLLUP_TOKEN }}
          script: |
            const sleep = ms => new Promise(res => setTimeout(res, ms));
            const owner = 'rome-protocol';
            const repo = 'tests';
            const workflow_id = 'reusable_wf_tests.yml';

            let runId = null;
            const maxAttempts = 12;
            const delayMs = 90000;

            for (let i = 0; i < maxAttempts; i++) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id,
                event: 'workflow_dispatch'
              });

              const latestRun = runs.data.workflow_runs.find(run =>
                run.head_branch === 'master' &&
                run.event === 'workflow_dispatch' &&
                run.status !== 'completed'
              );

              if (!latestRun) {
                console.log(`Waiting for workflow run to start... (${i + 1})`);
                await sleep(30000);
                continue;
              }

              runId = latestRun.id;
              console.log(`Found workflow run ID: ${runId}`);
              break;
            }

            if (!runId) {
              core.setFailed('Could not find the triggered workflow run.');
              return;
            }

            for (let i = 0; i < maxAttempts; i++) {
              const { data: run } = await github.rest.actions.getWorkflowRun({
                owner,
                repo,
                run_id: runId
              });

              console.log(`Status: ${run.status}, Conclusion: ${run.conclusion}`);

              if (run.status === 'completed') {
                if (run.conclusion !== 'success') {
                  core.setFailed(`Tests failed: ${run.conclusion}`);
                }
                return;
              }

              await sleep(delayMs);
            }

            core.setFailed('Timed out waiting for tests to complete.');
