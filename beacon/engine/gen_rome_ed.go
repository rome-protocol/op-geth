// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package engine

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
)

var _ = (*RomeExecutableDataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r RomeExecutableData) MarshalJSON() ([]byte, error) {
	type RomeExecutableData struct {
		ParentHash    common.Hash         `json:"parentHash"    gencodec:"required"`
		FeeRecipient  common.Address      `json:"feeRecipient"  gencodec:"required"`
		StateRoot     common.Hash         `json:"stateRoot"     gencodec:"required"`
		ReceiptsRoot  common.Hash         `json:"receiptsRoot"  gencodec:"required"`
		LogsBloom     hexutil.Bytes       `json:"logsBloom"     gencodec:"required"`
		Random        common.Hash         `json:"prevRandao"    gencodec:"required"`
		Number        hexutil.Uint64      `json:"blockNumber"   gencodec:"required"`
		GasLimit      hexutil.Uint64      `json:"gasLimit"      gencodec:"required"`
		GasUsed       hexutil.Uint64      `json:"gasUsed"       gencodec:"required"`
		RomeGasUsed   []hexutil.Uint64    `json:"romeGasUsed"   gencodec:"required"`
		Timestamp     hexutil.Uint64      `json:"timestamp"     gencodec:"required"`
		ExtraData     hexutil.Bytes       `json:"extraData"     gencodec:"required"`
		BaseFeePerGas *hexutil.Big        `json:"baseFeePerGas" gencodec:"required"`
		BlockHash     common.Hash         `json:"blockHash"     gencodec:"required"`
		Transactions  []hexutil.Bytes     `json:"transactions"  gencodec:"required"`
		Withdrawals   []*types.Withdrawal `json:"withdrawals"`
		BlobGasUsed   *hexutil.Uint64     `json:"blobGasUsed"`
		ExcessBlobGas *hexutil.Uint64     `json:"excessBlobGas"`
	}
	var enc RomeExecutableData
	enc.ParentHash = r.ParentHash
	enc.FeeRecipient = r.FeeRecipient
	enc.StateRoot = r.StateRoot
	enc.ReceiptsRoot = r.ReceiptsRoot
	enc.LogsBloom = r.LogsBloom
	enc.Random = r.Random
	enc.Number = hexutil.Uint64(r.Number)
	enc.GasLimit = hexutil.Uint64(r.GasLimit)
	enc.GasUsed = hexutil.Uint64(r.GasUsed)
	if r.RomeGasUsed != nil {
		enc.RomeGasUsed = make([]hexutil.Uint64, len(r.RomeGasUsed))
		for k, v := range r.RomeGasUsed {
			enc.RomeGasUsed[k] = hexutil.Uint64(v)
		}
	}
	enc.Timestamp = hexutil.Uint64(r.Timestamp)
	enc.ExtraData = r.ExtraData
	enc.BaseFeePerGas = (*hexutil.Big)(r.BaseFeePerGas)
	enc.BlockHash = r.BlockHash
	if r.Transactions != nil {
		enc.Transactions = make([]hexutil.Bytes, len(r.Transactions))
		for k, v := range r.Transactions {
			enc.Transactions[k] = v
		}
	}
	enc.Withdrawals = r.Withdrawals
	enc.BlobGasUsed = (*hexutil.Uint64)(r.BlobGasUsed)
	enc.ExcessBlobGas = (*hexutil.Uint64)(r.ExcessBlobGas)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *RomeExecutableData) UnmarshalJSON(input []byte) error {
	type RomeExecutableData struct {
		ParentHash    *common.Hash        `json:"parentHash"    gencodec:"required"`
		FeeRecipient  *common.Address     `json:"feeRecipient"  gencodec:"required"`
		StateRoot     *common.Hash        `json:"stateRoot"     gencodec:"required"`
		ReceiptsRoot  *common.Hash        `json:"receiptsRoot"  gencodec:"required"`
		LogsBloom     *hexutil.Bytes      `json:"logsBloom"     gencodec:"required"`
		Random        *common.Hash        `json:"prevRandao"    gencodec:"required"`
		Number        *hexutil.Uint64     `json:"blockNumber"   gencodec:"required"`
		GasLimit      *hexutil.Uint64     `json:"gasLimit"      gencodec:"required"`
		GasUsed       *hexutil.Uint64     `json:"gasUsed"       gencodec:"required"`
		RomeGasUsed   []hexutil.Uint64    `json:"romeGasUsed"   gencodec:"required"`
		Timestamp     *hexutil.Uint64     `json:"timestamp"     gencodec:"required"`
		ExtraData     *hexutil.Bytes      `json:"extraData"     gencodec:"required"`
		BaseFeePerGas *hexutil.Big        `json:"baseFeePerGas" gencodec:"required"`
		BlockHash     *common.Hash        `json:"blockHash"     gencodec:"required"`
		Transactions  []hexutil.Bytes     `json:"transactions"  gencodec:"required"`
		Withdrawals   []*types.Withdrawal `json:"withdrawals"`
		BlobGasUsed   *hexutil.Uint64     `json:"blobGasUsed"`
		ExcessBlobGas *hexutil.Uint64     `json:"excessBlobGas"`
	}
	var dec RomeExecutableData
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for RomeExecutableData")
	}
	r.ParentHash = *dec.ParentHash
	if dec.FeeRecipient == nil {
		return errors.New("missing required field 'feeRecipient' for RomeExecutableData")
	}
	r.FeeRecipient = *dec.FeeRecipient
	if dec.StateRoot == nil {
		return errors.New("missing required field 'stateRoot' for RomeExecutableData")
	}
	r.StateRoot = *dec.StateRoot
	if dec.ReceiptsRoot == nil {
		return errors.New("missing required field 'receiptsRoot' for RomeExecutableData")
	}
	r.ReceiptsRoot = *dec.ReceiptsRoot
	if dec.LogsBloom == nil {
		return errors.New("missing required field 'logsBloom' for RomeExecutableData")
	}
	r.LogsBloom = *dec.LogsBloom
	if dec.Random == nil {
		return errors.New("missing required field 'prevRandao' for RomeExecutableData")
	}
	r.Random = *dec.Random
	if dec.Number == nil {
		return errors.New("missing required field 'blockNumber' for RomeExecutableData")
	}
	r.Number = uint64(*dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for RomeExecutableData")
	}
	r.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for RomeExecutableData")
	}
	r.GasUsed = uint64(*dec.GasUsed)
	if dec.RomeGasUsed == nil {
		return errors.New("missing required field 'romeGasUsed' for RomeExecutableData")
	}
	r.RomeGasUsed = make([]uint64, len(dec.RomeGasUsed))
	for k, v := range dec.RomeGasUsed {
		r.RomeGasUsed[k] = uint64(v)
	}
	if dec.Timestamp == nil {
		return errors.New("missing required field 'timestamp' for RomeExecutableData")
	}
	r.Timestamp = uint64(*dec.Timestamp)
	if dec.ExtraData == nil {
		return errors.New("missing required field 'extraData' for RomeExecutableData")
	}
	r.ExtraData = *dec.ExtraData
	if dec.BaseFeePerGas == nil {
		return errors.New("missing required field 'baseFeePerGas' for RomeExecutableData")
	}
	r.BaseFeePerGas = (*big.Int)(dec.BaseFeePerGas)
	if dec.BlockHash == nil {
		return errors.New("missing required field 'blockHash' for RomeExecutableData")
	}
	r.BlockHash = *dec.BlockHash
	if dec.Transactions == nil {
		return errors.New("missing required field 'transactions' for RomeExecutableData")
	}
	r.Transactions = make([][]byte, len(dec.Transactions))
	for k, v := range dec.Transactions {
		r.Transactions[k] = v
	}
	if dec.Withdrawals != nil {
		r.Withdrawals = dec.Withdrawals
	}
	if dec.BlobGasUsed != nil {
		r.BlobGasUsed = (*uint64)(dec.BlobGasUsed)
	}
	if dec.ExcessBlobGas != nil {
		r.ExcessBlobGas = (*uint64)(dec.ExcessBlobGas)
	}
	return nil
}
